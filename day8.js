var test = `
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
`.trim();

var input = `
...d............................J.................
......e.............................J.............
..........6............7..........................
........................P7........................
..................................................
.........6........................................
e..........................x.................E....
...G...A.......d...........................o......
.....A.e...........................J......8.......
................6....9.....J.............E.8......
..........d.9.........7..K....E...................
...e.....U....9................x..K...............
......A......O...........P................o.......
......................x..................M..E.....
........................x........p................
........A..................O......................
.......r.f....O.......P9..G.........m.............
u...df..r...............7.........................
.....g.............nXu......N.........K...........
..............l..........0..............p.........
.......lu...................p......o..............
....g..........l........0p..G.....F...............
.....................................8......F.....
...................................C..............
....3................G0......................M....
2...f....g..........3........P......O......F......
g......3.....0....H......................F..M.....
.............c................m...h.....M.........
...........2....l.................................
..U...c......2...........................K........
.D....................r.....f.....................
....................N.............................
.U..............h.................................
...a.............u..............C.................
c...Uj....a..6...H...................R............
...3....j................H...............m........
.......................5.......C..........4....m..
......................H.........R......N....X.....
.........h..2.................R................N..
.......................r...........q...n..........
.....c..............5.............................
..a..h....D.................................n.....
......qk..................D............1.....X....
.k..................................q.............
..k..........a.............L................1....4
......k..........RQ..5.L.j..1..................4..
..................................................
..............L.....................oX............
........Q.............L.........n.................
...........Q.D........5..........1............4...
`.trim();

var map = input.split("\n").map(l => l.split(""));
var maxRow = map.length;
var maxCol = map[0].length;

var antennaTypes = [];
var antennas = {};
var antinodes = [];

var antennaType;
for (var row = 0; row < maxRow; row++) {
    for (var col = 0; col < maxCol; col++) {
        if (map[row][col] != ".") {
            antennaType =  map[row][col];
            if (antennaTypes.indexOf(antennaType) < 0) {
                antennaTypes.push(antennaType);
                antennas[antennaType] = [];
            }
            antennas[antennaType].push([row, col]);
        }
    }    
}

function addVector2D(a, b) {
    return [a[0] + b[0], a[1] + b[1]];
}

function isSameVector(a, b) {
    return a[0] == b[0] && a[1] == b[1];
}

function isValidLocation(loc) {
    return loc[0] >= 0 && loc[0] < maxRow && loc[1] >= 0 && loc[1] < maxCol;
}

function isAntinodeLocationUnique(location) {
    var locationString = JSON.stringify(location);
    var antinodeLocations = JSON.stringify(antinodes);
    return antinodeLocations.indexOf(locationString) < 0;
}

function setAntinodesForType(type, checkResonance) {
    var locations = antennas[type];

    if (locations.length < 2) {
        return;
    }

    var antennaA;
    var antennaB;
    var slope;
    var antinodeLocation;

    for (var i = 0; i < locations.length; i++) {
        antennaA = locations[i];

        if (checkResonance) {
            if (isAntinodeLocationUnique(antennaA)) {
                antinodes.push(antennaA);
            }
        }

        for (var j = 0; j < locations.length; j++) {
            antennaB = locations[j];

            if (isSameVector(antennaA, antennaB)) {
                continue;
            }

            slope = [antennaA[0] - antennaB[0], antennaA[1] - antennaB[1]];

            antinodeLocation = addVector2D(antennaA, slope);
            if (!isValidLocation(antinodeLocation)) {
                continue;
            }
            if (isAntinodeLocationUnique(antinodeLocation)) {
                antinodes.push(antinodeLocation);
            }

            if (checkResonance) {
                if (isAntinodeLocationUnique(antennaB)) {
                    antinodes.push(antennaB);
                }

                while (true) {
                    antinodeLocation = addVector2D(antinodeLocation, slope);
                    if (!isValidLocation(antinodeLocation)) {
                        break;
                    }
                    if (isAntinodeLocationUnique(antinodeLocation)) {
                        antinodes.push(antinodeLocation);
                    }
                }
            }
        }
    }
}

// Locate antinodes
for (var type of antennaTypes) {
    setAntinodesForType(type);
}

console.log(`Part 1: ${ antinodes.length }`);

antinodes = [];
for (var type of antennaTypes) {
    setAntinodesForType(type, true);
}

console.log(`Part 2: ${ antinodes.length }`);